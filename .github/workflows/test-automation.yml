name: Test Automation DocGen

on:
    workflow_call:
        inputs:
          DOCGEN_URL:
            required: true
            type: string
            description: "Web URL for DocGen"
        secrets:
          EMAILNOTIFICATION_LOGICAPP_URL_TA:
            required: false
            description: "Logic App URL for email notifications"

env:
    url: ${{ inputs.DOCGEN_URL }}
    accelerator_name: "DocGen"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/e2e-test/requirements.txt

      - name: Ensure browsers are installed
        run: python -m playwright install --with-deps chromium

      - name: Open URL
        run: |
          echo "Opening URL: ${{ env.url }}"
          python -m webbrowser "${{ env.url }}"

      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash

      - name: Run tests(1)
        id: test1
        run: |
          xvfb-run pytest --headed --html=report/report.html --self-contained-html
        working-directory: tests/e2e-test
        continue-on-error: true

      - name: Sleep for 30 seconds
        if: ${{ steps.test1.outcome == 'failure' }}
        run: sleep 30s
        shell: bash

      - name: Run tests(2)
        if: ${{ steps.test1.outcome == 'failure' }}
        id: test2
        run: |
          xvfb-run pytest --headed --html=report/report.html --self-contained-html
        working-directory: tests/e2e-test
        continue-on-error: true

      - name: Sleep for 60 seconds
        if: ${{ steps.test2.outcome == 'failure' }}
        run: sleep 60s
        shell: bash

      - name: Run tests(3)
        if: ${{ steps.test2.outcome == 'failure' }}
        id: test3
        run: |
          xvfb-run pytest --headed --html=report/report.html --self-contained-html
        working-directory: tests/e2e-test

      - name: Upload test report
        id: upload_report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-report
          path: tests/e2e-test/report/*

      - name: Send Notification
        if: always()
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          REPORT_URL=${{ steps.upload_report.outputs.artifact-url }}
          IS_SUCCESS=${{ steps.test1.outcome == 'success' || steps.test2.outcome == 'success' || steps.test3.outcome == 'success' }}
          # Construct the email body
          if [ "$IS_SUCCESS" = "true" ]; then
            EMAIL_BODY=$(cat <<EOF
            {
              "body": "<p>Dear Team,</p><p>We would like to inform you that the ${{ env.accelerator_name }} Test Automation process has completed successfully.</p><p><strong>Run URL:</strong> <a href=\"${RUN_URL}\">${RUN_URL}</a><br></p><p><strong>Test Report:</strong> <a href=\"${REPORT_URL}\">${REPORT_URL}</a></p><p>Best regards,<br>Your Automation Team</p>",
              "subject": "${{ env.accelerator_name }} Test Automation - Success"
            }
          EOF
            )
          else
            EMAIL_BODY=$(cat <<EOF
            {
              "body": "<p>Dear Team,</p><p>We would like to inform you that the ${{ env.accelerator_name }} Test Automation process  has encountered an issue and has failed to complete successfully.</p><p><strong>Run URL:</strong> <a href=\"${RUN_URL}\">${RUN_URL}</a><br> ${OUTPUT}</p><p><strong>Test Report:</strong> <a href=\"${REPORT_URL}\">${REPORT_URL}</a></p><p>Please investigate the matter at your earliest convenience.</p><p>Best regards,<br>Your Automation Team</p>",
              "subject": "${{ env.accelerator_name }} Test Automation - Failure"
            }
          EOF
            )
          fi

          # Send the notification
          curl -X POST "${{ secrets.EMAILNOTIFICATION_LOGICAPP_URL_TA }}" \
            -H "Content-Type: application/json" \
            -d "$EMAIL_BODY" || echo "Failed to send notification"
            
      - name: Generate E2E Test Summary
        if: always()
        run: |
          echo "## 🧪 E2E Test Job Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall test result
          OVERALL_SUCCESS="${{ steps.test1.outcome == 'success' || steps.test2.outcome == 'success' || steps.test3.outcome == 'success' }}"
          if [[ "$OVERALL_SUCCESS" == "true" ]]; then
            echo "| **Job Status** | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Job Status** | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "| **Target URL** | [${{ env.url }}](${{ env.url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Accelerator** | ${{ env.accelerator_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Python Version** | 3.13 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Framework** | Playwright + pytest |" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Report** | [Download Artifact](${{ steps.upload_report.outputs.artifact-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Test Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "| Attempt | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Test Run 1** | ${{ steps.test1.outcome == 'success' && '✅ Passed' || '❌ Failed' }} | Initial test execution |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.test1.outcome }}" == "failure" ]]; then
            echo "| **Test Run 2** | ${{ steps.test2.outcome == 'success' && '✅ Passed' || steps.test2.outcome == 'failure' && '❌ Failed' || '⏸️ Skipped' }} | Retry after 30s delay |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.test2.outcome }}" == "failure" ]]; then
            echo "| **Test Run 3** | ${{ steps.test3.outcome == 'success' && '✅ Passed' || steps.test3.outcome == 'failure' && '❌ Failed' || '⏸️ Skipped' }} | Final retry after 60s delay |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$OVERALL_SUCCESS" == "true" ]]; then
            echo "### ✅ Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- End-to-end tests completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Application is functioning as expected" >> $GITHUB_STEP_SUMMARY
            echo "- All critical user flows validated" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- All test attempts failed" >> $GITHUB_STEP_SUMMARY
            echo "- Application may have functional issues" >> $GITHUB_STEP_SUMMARY
            echo "- Review test report for detailed failure information" >> $GITHUB_STEP_SUMMARY
          fi
